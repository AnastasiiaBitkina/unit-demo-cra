name: Release
on:  
  push:
    tags:
      - 'v*'

jobs:  
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Generate changelog
        id: generate_changelog
        uses: github-changelog-generator/github-changelog-generator@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: v*
          unreleased-only: true
          future-release: ${{ steps.get_version.outputs.VERSION }}
      
      - name: Create Release Issue
        uses: octokit/create-an-issue@v2
        id: create_issue
        with:
          title: "Release ${{ steps.get_version.outputs.VERSION }}"
          body: |
            Author: ${{ github.actor }}
            Date: ${{ github.event.push.timestamp }}
            Version: ${{ steps.get_version.outputs.VERSION }}
            Changelog: ${{ steps.generate_changelog.outputs.changelog }}
          labels: RELEASE

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install

      - name: Run tests
        run: npm test

      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

      - name: Update Issue with test results and deploy info
        uses: actions/github-script@v4
        id: update_issue
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = ${{ steps.create_issue.outputs.number }};
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number
            });
            const new_body = issue.data.body +
              "\n\nTest Results: [Link to Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" +
              "\n\nDeploy Info: Successfully deployed to gh-pages.";
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: new_body
            });

      - name: Close Issue
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create_issue.outputs.number }},
              state: "closed"
            });

